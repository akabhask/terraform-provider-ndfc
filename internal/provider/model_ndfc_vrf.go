// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

var DeployConfig = false
//template:begin types
type VRF struct {
	Id                          types.String     `tfsdk:"id"`
	Timeouts                    timeouts.Value   `tfsdk:"timeouts"`
	FabricName                  types.String     `tfsdk:"fabric_name"`
	VrfName                     types.String     `tfsdk:"vrf_name"`
	VrfTemplate                 types.String     `tfsdk:"vrf_template"`
	VrfExtensionTemplate        types.String     `tfsdk:"vrf_extension_template"`
	VrfId                       types.Int64      `tfsdk:"vrf_id"`
	VlanId                      types.Int64      `tfsdk:"vlan_id"`
	VlanName                    types.String     `tfsdk:"vlan_name"`
	InterfaceDescription        types.String     `tfsdk:"interface_description"`
	VrfDescription              types.String     `tfsdk:"vrf_description"`
	Mtu                         types.Int64      `tfsdk:"mtu"`
	LoopbackRoutingTag          types.Int64      `tfsdk:"loopback_routing_tag"`
	RedistributeDirectRouteMap  types.String     `tfsdk:"redistribute_direct_route_map"`
	MaxBgpPaths                 types.Int64      `tfsdk:"max_bgp_paths"`
	MaxIbgpPaths                types.Int64      `tfsdk:"max_ibgp_paths"`
	Ipv6LinkLocal               types.Bool       `tfsdk:"ipv6_link_local"`
	Trm                         types.Bool       `tfsdk:"trm"`
	NoRp                        types.Bool       `tfsdk:"no_rp"`
	RpExternal                  types.Bool       `tfsdk:"rp_external"`
	RpAddress                   types.String     `tfsdk:"rp_address"`
	RpLoopbackId                types.Int64      `tfsdk:"rp_loopback_id"`
	UnderlayMulticastAddress    types.String     `tfsdk:"underlay_multicast_address"`
	OverlayMulticastGroups      types.String     `tfsdk:"overlay_multicast_groups"`
	MvpnInterAs                 types.Bool       `tfsdk:"mvpn_inter_as"`
	TrmBgwMsite                 types.Bool       `tfsdk:"trm_bgw_msite"`
	AdvertiseHostRoutes         types.Bool       `tfsdk:"advertise_host_routes"`
	AdvertiseDefaultRoute       types.Bool       `tfsdk:"advertise_default_route"`
	ConfigureStaticDefaultRoute types.Bool       `tfsdk:"configure_static_default_route"`
	BgpPassword                 types.String     `tfsdk:"bgp_password"`
	BgpPasswordType             types.String     `tfsdk:"bgp_password_type"`
	Netflow                     types.Bool       `tfsdk:"netflow"`
	NetflowMonitor              types.String     `tfsdk:"netflow_monitor"`
	DisableRtAuto               types.Bool       `tfsdk:"disable_rt_auto"`
	RouteTargetImport           types.String     `tfsdk:"route_target_import"`
	RouteTargetExport           types.String     `tfsdk:"route_target_export"`
	RouteTargetImportEvpn       types.String     `tfsdk:"route_target_import_evpn"`
	RouteTargetExportEvpn       types.String     `tfsdk:"route_target_export_evpn"`
	RouteTargetImportMvpn       types.String     `tfsdk:"route_target_import_mvpn"`
	RouteTargetExportMvpn       types.String     `tfsdk:"route_target_export_mvpn"`
	RouteTargetImportCloudEvpn  types.String     `tfsdk:"route_target_import_cloud_evpn"`
	RouteTargetExportCloudEvpn  types.String     `tfsdk:"route_target_export_cloud_evpn"`
	Timeout                     types.String     `tfsdk:"timeout"`
	Attachments                 []VRFAttachments `tfsdk:"attachments"`
}

type VRFAttachments struct {
	SerialNumber   types.String `tfsdk:"serial_number"`
	DeployConfig   types.Bool   `tfsdk:"deploy_config"`
	VlanId         types.Int64  `tfsdk:"vlan_id"`
	FreeformConfig types.String `tfsdk:"freeform_config"`
	LoopbackId     types.Int64  `tfsdk:"loopback_id"`
	LoopbackIpv4   types.String `tfsdk:"loopback_ipv4"`
	LoopbackIpv6   types.String `tfsdk:"loopback_ipv6"`
}

//template:end types



//template:end getPath

func (data VRF) toBody(ctx context.Context) string {
	body := ""
	if !data.FabricName.IsNull() && !data.FabricName.IsUnknown() {
		body, _ = sjson.Set(body, "fabric", data.FabricName.ValueString())
	}
	if !data.VrfName.IsNull() && !data.VrfName.IsUnknown() {
		body, _ = sjson.Set(body, "vrfName", data.VrfName.ValueString())
	}
	if !data.VrfTemplate.IsNull() && !data.VrfTemplate.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplate", data.VrfTemplate.ValueString())
	}
	if !data.VrfExtensionTemplate.IsNull() && !data.VrfExtensionTemplate.IsUnknown() {
		body, _ = sjson.Set(body, "vrfExtensionTemplate", data.VrfExtensionTemplate.ValueString())
	}
	if !data.VrfId.IsNull() && !data.VrfId.IsUnknown() {
		body, _ = sjson.Set(body, "vrfId", data.VrfId.ValueInt64())
	}
	if !data.VlanId.IsNull() && !data.VlanId.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.vrfVlanId", data.VlanId.ValueInt64())
	}
	if !data.VlanName.IsNull() && !data.VlanName.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.vrfVlanName", data.VlanName.ValueString())
	}
	if !data.InterfaceDescription.IsNull() && !data.InterfaceDescription.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.vrfIntfDescription", data.InterfaceDescription.ValueString())
	}
	if !data.VrfDescription.IsNull() && !data.VrfDescription.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.vrfDescription", data.VrfDescription.ValueString())
	}
	if !data.Mtu.IsNull() && !data.Mtu.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.mtu", data.Mtu.ValueInt64())
	}
	if !data.LoopbackRoutingTag.IsNull() && !data.LoopbackRoutingTag.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.tag", data.LoopbackRoutingTag.ValueInt64())
	}
	if !data.RedistributeDirectRouteMap.IsNull() && !data.RedistributeDirectRouteMap.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.vrfRouteMap", data.RedistributeDirectRouteMap.ValueString())
	}
	if !data.MaxBgpPaths.IsNull() && !data.MaxBgpPaths.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.maxBgpPaths", data.MaxBgpPaths.ValueInt64())
	}
	if !data.MaxIbgpPaths.IsNull() && !data.MaxIbgpPaths.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.maxIbgpPaths", data.MaxIbgpPaths.ValueInt64())
	}
	if !data.Ipv6LinkLocal.IsNull() && !data.Ipv6LinkLocal.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.ipv6LinkLocalFlag", data.Ipv6LinkLocal.ValueBool())
	}
	if !data.Trm.IsNull() && !data.Trm.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.trmEnabled", data.Trm.ValueBool())
	}
	if !data.NoRp.IsNull() && !data.NoRp.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.isRPAbsent", data.NoRp.ValueBool())
	}
	if !data.RpExternal.IsNull() && !data.RpExternal.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.isRPExternal", data.RpExternal.ValueBool())
	}
	if !data.RpAddress.IsNull() && !data.RpAddress.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.rpAddress", data.RpAddress.ValueString())
	}
	if !data.RpLoopbackId.IsNull() && !data.RpLoopbackId.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.loopbackNumber", data.RpLoopbackId.ValueInt64())
	}
	if !data.UnderlayMulticastAddress.IsNull() && !data.UnderlayMulticastAddress.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.L3VniMcastGroup", data.UnderlayMulticastAddress.ValueString())
	}
	if !data.OverlayMulticastGroups.IsNull() && !data.OverlayMulticastGroups.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.multicastGroup", data.OverlayMulticastGroups.ValueString())
	}
	if !data.MvpnInterAs.IsNull() && !data.MvpnInterAs.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.mvpnInterAs", data.MvpnInterAs.ValueBool())
	}
	if !data.TrmBgwMsite.IsNull() && !data.TrmBgwMsite.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.trmBGWMSiteEnabled", data.TrmBgwMsite.ValueBool())
	}
	if !data.AdvertiseHostRoutes.IsNull() && !data.AdvertiseHostRoutes.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.advertiseHostRouteFlag", data.AdvertiseHostRoutes.ValueBool())
	}
	if !data.AdvertiseDefaultRoute.IsNull() && !data.AdvertiseDefaultRoute.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.advertiseDefaultRouteFlag", data.AdvertiseDefaultRoute.ValueBool())
	}
	if !data.ConfigureStaticDefaultRoute.IsNull() && !data.ConfigureStaticDefaultRoute.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.configureStaticDefaultRouteFlag", data.ConfigureStaticDefaultRoute.ValueBool())
	}
	if !data.BgpPassword.IsNull() && !data.BgpPassword.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.bgpPassword", data.BgpPassword.ValueString())
	}
	if !data.BgpPasswordType.IsNull() && !data.BgpPasswordType.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.bgpPasswordKeyType", data.BgpPasswordType.ValueString())
	}
	if !data.Netflow.IsNull() && !data.Netflow.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.ENABLE_NETFLOW", data.Netflow.ValueBool())
	}
	if !data.NetflowMonitor.IsNull() && !data.NetflowMonitor.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.NETFLOW_MONITOR", data.NetflowMonitor.ValueString())
	}
	if !data.DisableRtAuto.IsNull() && !data.DisableRtAuto.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.disableRtAuto", data.DisableRtAuto.ValueBool())
	}
	if !data.RouteTargetImport.IsNull() && !data.RouteTargetImport.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.routeTargetImport", data.RouteTargetImport.ValueString())
	}
	if !data.RouteTargetExport.IsNull() && !data.RouteTargetExport.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.routeTargetExport", data.RouteTargetExport.ValueString())
	}
	if !data.RouteTargetImportEvpn.IsNull() && !data.RouteTargetImportEvpn.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.routeTargetImportEvpn", data.RouteTargetImportEvpn.ValueString())
	}
	if !data.RouteTargetExportEvpn.IsNull() && !data.RouteTargetExportEvpn.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.routeTargetExportEvpn", data.RouteTargetExportEvpn.ValueString())
	}
	if !data.RouteTargetImportMvpn.IsNull() && !data.RouteTargetImportMvpn.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.routeTargetImportMvpn", data.RouteTargetImportMvpn.ValueString())
	}
	if !data.RouteTargetExportMvpn.IsNull() && !data.RouteTargetExportMvpn.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.routeTargetExportMvpn", data.RouteTargetExportMvpn.ValueString())
	}
	if !data.RouteTargetImportCloudEvpn.IsNull() && !data.RouteTargetImportCloudEvpn.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.cloudRouteTargetImportEvpn", data.RouteTargetImportCloudEvpn.ValueString())
	}
	if !data.RouteTargetExportCloudEvpn.IsNull() && !data.RouteTargetExportCloudEvpn.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.cloudRouteTargetExportEvpn", data.RouteTargetExportCloudEvpn.ValueString())
	}
	if !data.Timeout.IsNull() && !data.Timeout.IsUnknown() {
		body, _ = sjson.Set(body, "vrfTemplateConfig.timeout", data.Timeout.ValueString())
	}
	return body
}

func (data VRF) toBodyAttachments(ctx context.Context, attachments gjson.Result) string {
	body := ""
	body, _ = sjson.Set(body, "0.vrfName", data.VrfName.ValueString())
	body, _ = sjson.Set(body, "0.lanAttachList", []interface{}{})
	attachments.Get("0").ForEach(func(k, v gjson.Result) bool {
		serialNumber := v.Get("switchSerialNo").String()
		itemBody := ""
		if !data.FabricName.IsNull() && !data.FabricName.IsUnknown() {
			itemBody, _ = sjson.Set(itemBody, "fabric", data.FabricName.ValueString())
		}
		if !data.VrfName.IsNull() && !data.VrfName.IsUnknown() {
			itemBody, _ = sjson.Set(itemBody, "vrfName", data.VrfName.ValueString())
		}
		found := false
		for _, item := range data.Attachments {
			if item.SerialNumber.ValueString() == serialNumber {
				found = true
				if !item.SerialNumber.IsNull() && !item.SerialNumber.IsUnknown() {
					itemBody, _ = sjson.Set(itemBody, "serialNumber", item.SerialNumber.ValueString())
				}
				if !item.VlanId.IsNull() && !item.VlanId.IsUnknown() {
					itemBody, _ = sjson.Set(itemBody, "vlan", item.VlanId.ValueInt64())
				}
				if !item.FreeformConfig.IsNull() && !item.FreeformConfig.IsUnknown() {
					itemBody, _ = sjson.Set(itemBody, "freeformConfig", item.FreeformConfig.ValueString())
				}
				instanceBody := ""
				if !item.LoopbackId.IsNull() && !item.LoopbackId.IsUnknown() {
					instanceBody, _ = sjson.Set(instanceBody, "loopbackId", item.LoopbackId.ValueInt64())
				}
				if !item.LoopbackIpv4.IsNull() && !item.LoopbackIpv4.IsUnknown() {
					instanceBody, _ = sjson.Set(instanceBody, "loopbackIpAddress", item.LoopbackIpv4.ValueString())
				}
				if !item.LoopbackIpv6.IsNull() && !item.LoopbackIpv6.IsUnknown() {
					instanceBody, _ = sjson.Set(instanceBody, "loopbackIpV6Address", item.LoopbackIpv6.ValueString())
				}
				if instanceBody != "" {
					itemBody, _ = sjson.Set(itemBody, "instanceValues", instanceBody)
				}
				if !item.DeployConfig.IsNull() && !item.DeployConfig.IsUnknown() {
				    itemBody, _ = sjson.Set(itemBody, "deployment", item.DeployConfig.ValueBool())
					if item.DeployConfig.ValueBool() == true {
						DeployConfig = true
					}
				} else {
					itemBody, _ = sjson.Set(itemBody, "deployment", false)
				}
			}
		}
		if !found {
			itemBody, _ = sjson.Set(itemBody, "serialNumber", serialNumber)
			itemBody, _ = sjson.Set(itemBody, "vlan", v.Get("vlanId").Int())
			itemBody, _ = sjson.Set(itemBody, "deployment", false)
		}
		body, _ = sjson.SetRaw(body, "0.lanAttachList.-1", itemBody)

		return true // keep iterating
	})
	return body
}

func (data *VRF) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("fabric"); value.Exists() && value.String() != "" {
		data.FabricName = types.StringValue(value.String())
	} else {
		data.FabricName = types.StringNull()
	}
	if value := res.Get("vrfName"); value.Exists() && value.String() != "" {
		data.VrfName = types.StringValue(value.String())
	} else {
		data.VrfName = types.StringNull()
	}
	if value := res.Get("vrfTemplate"); value.Exists() && value.String() != "" {
		data.VrfTemplate = types.StringValue(value.String())
	} else {
		data.VrfTemplate = types.StringNull()
	}
	if value := res.Get("vrfExtensionTemplate"); value.Exists() && value.String() != "" {
		data.VrfExtensionTemplate = types.StringValue(value.String())
	} else {
		data.VrfExtensionTemplate = types.StringNull()
	}
	if value := res.Get("vrfId"); value.Exists() && value.String() != "" {
		data.VrfId = types.Int64Value(value.Int())
	} else {
		data.VrfId = types.Int64Null()
	}
	if value := res.Get("vrfTemplateConfig.vrfVlanId"); value.Exists() && value.String() != "" {
		data.VlanId = types.Int64Value(value.Int())
	} else {
		data.VlanId = types.Int64Null()
	}
	if value := res.Get("vrfTemplateConfig.vrfVlanName"); value.Exists() && value.String() != "" {
		data.VlanName = types.StringValue(value.String())
	} else {
		data.VlanName = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.vrfIntfDescription"); value.Exists() && value.String() != "" {
		data.InterfaceDescription = types.StringValue(value.String())
	} else {
		data.InterfaceDescription = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.vrfDescription"); value.Exists() && value.String() != "" {
		data.VrfDescription = types.StringValue(value.String())
	} else {
		data.VrfDescription = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.mtu"); value.Exists() && value.String() != "" {
		data.Mtu = types.Int64Value(value.Int())
	} else {
		data.Mtu = types.Int64Null()
	}
	if value := res.Get("vrfTemplateConfig.tag"); value.Exists() && value.String() != "" {
		data.LoopbackRoutingTag = types.Int64Value(value.Int())
	} else {
		data.LoopbackRoutingTag = types.Int64Null()
	}
	if value := res.Get("vrfTemplateConfig.vrfRouteMap"); value.Exists() && value.String() != "" {
		data.RedistributeDirectRouteMap = types.StringValue(value.String())
	} else {
		data.RedistributeDirectRouteMap = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.maxBgpPaths"); value.Exists() && value.String() != "" {
		data.MaxBgpPaths = types.Int64Value(value.Int())
	} else {
		data.MaxBgpPaths = types.Int64Null()
	}
	if value := res.Get("vrfTemplateConfig.maxIbgpPaths"); value.Exists() && value.String() != "" {
		data.MaxIbgpPaths = types.Int64Value(value.Int())
	} else {
		data.MaxIbgpPaths = types.Int64Null()
	}
	if value := res.Get("vrfTemplateConfig.ipv6LinkLocalFlag"); value.Exists() && value.String() != "" {
		data.Ipv6LinkLocal = types.BoolValue(value.Bool())
	} else {
		data.Ipv6LinkLocal = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.trmEnabled"); value.Exists() && value.String() != "" {
		data.Trm = types.BoolValue(value.Bool())
	} else {
		data.Trm = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.isRPAbsent"); value.Exists() && value.String() != "" {
		data.NoRp = types.BoolValue(value.Bool())
	} else {
		data.NoRp = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.isRPExternal"); value.Exists() && value.String() != "" {
		data.RpExternal = types.BoolValue(value.Bool())
	} else {
		data.RpExternal = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.rpAddress"); value.Exists() && value.String() != "" {
		data.RpAddress = types.StringValue(value.String())
	} else {
		data.RpAddress = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.loopbackNumber"); value.Exists() && value.String() != "" {
		data.RpLoopbackId = types.Int64Value(value.Int())
	} else {
		data.RpLoopbackId = types.Int64Null()
	}
	if value := res.Get("vrfTemplateConfig.L3VniMcastGroup"); value.Exists() && value.String() != "" {
		data.UnderlayMulticastAddress = types.StringValue(value.String())
	} else {
		data.UnderlayMulticastAddress = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.multicastGroup"); value.Exists() && value.String() != "" {
		data.OverlayMulticastGroups = types.StringValue(value.String())
	} else {
		data.OverlayMulticastGroups = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.mvpnInterAs"); value.Exists() && value.String() != "" {
		data.MvpnInterAs = types.BoolValue(value.Bool())
	} else {
		data.MvpnInterAs = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.trmBGWMSiteEnabled"); value.Exists() && value.String() != "" {
		data.TrmBgwMsite = types.BoolValue(value.Bool())
	} else {
		data.TrmBgwMsite = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.advertiseHostRouteFlag"); value.Exists() && value.String() != "" {
		data.AdvertiseHostRoutes = types.BoolValue(value.Bool())
	} else {
		data.AdvertiseHostRoutes = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.advertiseDefaultRouteFlag"); value.Exists() && value.String() != "" {
		data.AdvertiseDefaultRoute = types.BoolValue(value.Bool())
	} else {
		data.AdvertiseDefaultRoute = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.configureStaticDefaultRouteFlag"); value.Exists() && value.String() != "" {
		data.ConfigureStaticDefaultRoute = types.BoolValue(value.Bool())
	} else {
		data.ConfigureStaticDefaultRoute = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.bgpPassword"); value.Exists() && value.String() != "" {
		data.BgpPassword = types.StringValue(value.String())
	} else {
		data.BgpPassword = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.bgpPasswordKeyType"); value.Exists() && value.String() != "" {
		data.BgpPasswordType = types.StringValue(value.String())
	} else {
		data.BgpPasswordType = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.ENABLE_NETFLOW"); value.Exists() && value.String() != "" {
		data.Netflow = types.BoolValue(value.Bool())
	} else {
		data.Netflow = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.NETFLOW_MONITOR"); value.Exists() && value.String() != "" {
		data.NetflowMonitor = types.StringValue(value.String())
	} else {
		data.NetflowMonitor = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.disableRtAuto"); value.Exists() && value.String() != "" {
		data.DisableRtAuto = types.BoolValue(value.Bool())
	} else {
		data.DisableRtAuto = types.BoolNull()
	}
	if value := res.Get("vrfTemplateConfig.routeTargetImport"); value.Exists() && value.String() != "" {
		data.RouteTargetImport = types.StringValue(value.String())
	} else {
		data.RouteTargetImport = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.routeTargetExport"); value.Exists() && value.String() != "" {
		data.RouteTargetExport = types.StringValue(value.String())
	} else {
		data.RouteTargetExport = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.routeTargetImportEvpn"); value.Exists() && value.String() != "" {
		data.RouteTargetImportEvpn = types.StringValue(value.String())
	} else {
		data.RouteTargetImportEvpn = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.routeTargetExportEvpn"); value.Exists() && value.String() != "" {
		data.RouteTargetExportEvpn = types.StringValue(value.String())
	} else {
		data.RouteTargetExportEvpn = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.routeTargetImportMvpn"); value.Exists() && value.String() != "" {
		data.RouteTargetImportMvpn = types.StringValue(value.String())
	} else {
		data.RouteTargetImportMvpn = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.routeTargetExportMvpn"); value.Exists() && value.String() != "" {
		data.RouteTargetExportMvpn = types.StringValue(value.String())
	} else {
		data.RouteTargetExportMvpn = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.cloudRouteTargetImportEvpn"); value.Exists() && value.String() != "" {
		data.RouteTargetImportCloudEvpn = types.StringValue(value.String())
	} else {
		data.RouteTargetImportCloudEvpn = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.cloudRouteTargetExportEvpn"); value.Exists() && value.String() != "" {
		data.RouteTargetExportCloudEvpn = types.StringValue(value.String())
	} else {
		data.RouteTargetExportCloudEvpn = types.StringNull()
	}
	if value := res.Get("vrfTemplateConfig.Timeout"); value.Exists() && value.String() != "" {
		data.Timeout = types.StringValue(value.String())
	} else {
		data.Timeout = types.StringNull()
	}
}

func (data *VRF) fromBodyAttachments(ctx context.Context, res gjson.Result, all bool) {
	serialsToRemove := []string{}
	res.Get("0").ForEach(func(k, v gjson.Result) bool {
		serialNumber := v.Get("switchSerialNo").String()
		attached := v.Get("isLanAttached").Bool()
		if all {
			if attached {
				var item VRFAttachments
				if value := v.Get("switchSerialNo"); value.Exists() {
					item.SerialNumber = types.StringValue(value.String())
				} else {
					item.SerialNumber = types.StringNull()
				}
				if value := v.Get("vlanId"); value.Exists() {
					item.VlanId = types.Int64Value(value.Int())
				} else {
					item.VlanId = types.Int64Null()
				}
				if value := v.Get("instanceValues.loopbackId"); value.Exists() {
					item.LoopbackId = types.Int64Value(value.Int())
				} else {
					item.LoopbackId = types.Int64Null()
				}
				if value := v.Get("instanceValues.loopbackIpAddress"); value.Exists() {
					item.LoopbackIpv4 = types.StringValue(value.String())
				} else {
					item.LoopbackIpv4 = types.StringNull()
				}
				if value := v.Get("instanceValues.loopbackIpV6Address"); value.Exists() {
					item.LoopbackIpv6 = types.StringValue(value.String())
				} else {
					item.LoopbackIpv6 = types.StringNull()
				}
				data.Attachments = append(data.Attachments, item)
			}
		} else {
			for _, item := range data.Attachments {
				if item.SerialNumber.ValueString() == serialNumber {
					if attached {
						if value := v.Get("vlanId"); value.Exists() {
							item.VlanId = types.Int64Value(value.Int())
						} else {
							item.VlanId = types.Int64Null()
						}
						if value := v.Get("instanceValues.loopbackId"); value.Exists() {
							item.LoopbackId = types.Int64Value(value.Int())
						} else {
							item.LoopbackId = types.Int64Null()
						}
						if value := v.Get("instanceValues.loopbackIpAddress"); value.Exists() {
							item.LoopbackIpv4 = types.StringValue(value.String())
						} else {
							item.LoopbackIpv4 = types.StringNull()
						}
						if value := v.Get("instanceValues.loopbackIpV6Address"); value.Exists() {
							item.LoopbackIpv6 = types.StringValue(value.String())
						} else {
							item.LoopbackIpv6 = types.StringNull()
						}
					} else {
						serialsToRemove = append(serialsToRemove, serialNumber)
					}
				}
			}
		}
		return true
	})
	for i := range data.Attachments {
		if ((i > 0) && (i < len(data.Attachments))) {
			for _, serial := range serialsToRemove {
			    if data.Attachments[i].SerialNumber.ValueString() == serial {
				    data.Attachments = append(data.Attachments[:i], data.Attachments[i+1:]...)
				    break
				}
		    }
	    }
	}
}
