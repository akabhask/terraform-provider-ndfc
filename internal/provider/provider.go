// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin provider
import (
	"context"
	"os"
	"strconv"
	"sync"
    "log"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/go-nd"
)



const NDFC_BASEPATH = "/appcenter/cisco/ndfc/api/v1"

// NdfcProvider defines the provider implementation.
type NdfcProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// NdfcProviderModel describes the provider data model.
type NdfcProviderModel struct {
	Username types.String `tfsdk:"username"`
	Password types.String `tfsdk:"password"`
	Domain   types.String `tfsdk:"domain"`
	URL      types.String `tfsdk:"url"`
	Insecure types.Bool   `tfsdk:"insecure"`
	Retries  types.Int64  `tfsdk:"retries"`
}
type NdfcClient struct {
	client      *nd.Client
	updateMutex *sync.Mutex
}

// NdfcProviderData describes the data maintained by the provider.
type NdfcProviderData struct {
	Client      *nd.Client
	UpdateMutex *sync.Mutex
}

// Metadata returns the provider type name.
func (p *NdfcProvider) Metadata(_ context.Context, _ provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "ndfc"
	resp.Version = p.version
}

func (p *NdfcProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"username": schema.StringAttribute{
				MarkdownDescription: "Username for the Nexus Dashboard account. This can also be set as the NDFC_USERNAME environment variable.",
				Optional:            true,
			},
			"password": schema.StringAttribute{
				MarkdownDescription: "Password for the Nexus Dashboard account. This can also be set as the NDFC_PASSWORD environment variable.",
				Optional:            true,
				Sensitive:           true,
			},
			"domain": schema.StringAttribute{
				MarkdownDescription: "Domain for the Nexus Dashboard account. This can also be set as the NDFC_DOMAIN environment variable.",
				Optional:            true,
			},
			"url": schema.StringAttribute{
				MarkdownDescription: "URL of the Nexus Dashboard instace. This can also be set as the NDFC_URL environment variable.",
				Optional:            true,
			},
			"insecure": schema.BoolAttribute{
				MarkdownDescription: "Allow insecure HTTPS client. This can also be set as the NDFC_INSECURE environment variable. Defaults to `true`.",
				Optional:            true,
			},
			"retries": schema.Int64Attribute{
				MarkdownDescription: "Number of retries for REST API calls. This can also be set as the NDFC_RETRIES environment variable. Defaults to `3`.",
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(0, 9),
				},
			},
		},
	}
}

func (p *NdfcProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	// Retrieve provider data from configuration
	var config NdfcProviderModel
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// User must provide a username to the provider
	var username string
	if config.Username.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as username",
		)
		return
	}

	if config.Username.IsNull() {
		username = os.Getenv("NDFC_USERNAME")
	} else {
		username = config.Username.ValueString()
	}

	if username == "" {
		// Error vs warning - empty value must stop execution
		resp.Diagnostics.AddError(
			"Unable to find username",
			"Username cannot be an empty string",
		)
		return
	}

	// User must provide a password to the provider
	var password string
	if config.Password.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as password",
		)
		return
	}

	if config.Password.IsNull() {
		password = os.Getenv("NDFC_PASSWORD")
	} else {
		password = config.Password.ValueString()
	}

	if password == "" {
		// Error vs warning - empty value must stop execution
		resp.Diagnostics.AddError(
			"Unable to find password",
			"Password cannot be an empty string",
		)
		return
	}

	// User can provide a domain to the provider
	var domain string
	if config.Domain.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as domain",
		)
		return
	}

	if config.Domain.IsNull() {
		domain = os.Getenv("NDFC_DOMAIN")
	} else {
		domain = config.Domain.ValueString()
	}

	// User must provide a url to the provider
	var url string
	if config.URL.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as url",
		)
		return
	}

	if config.URL.IsNull() {
		url = os.Getenv("NDFC_URL")
	} else {
		url = config.URL.ValueString()
	}

	if url == "" {
		// Error vs warning - empty value must stop execution
		resp.Diagnostics.AddError(
			"Unable to find url",
			"URL cannot be an empty string",
		)
		return
	}

	var insecure bool
	if config.Insecure.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as insecure",
		)
		return
	}

	if config.Insecure.IsNull() {
		insecureStr := os.Getenv("NDFC_INSECURE")
		if insecureStr == "" {
			insecure = true
		} else {
			insecure, _ = strconv.ParseBool(insecureStr)
		}
	} else {
		insecure = config.Insecure.ValueBool()
	}

	var retries int64
	if config.Retries.IsUnknown() {
		// Cannot connect to client with an unknown value
		resp.Diagnostics.AddWarning(
			"Unable to create client",
			"Cannot use unknown value as retries",
		)
		return
	}

	if config.Retries.IsNull() {
		retriesStr := os.Getenv("NDFC_RETRIES")
		if retriesStr == "" {
			retries = 3
		} else {
			retries, _ = strconv.ParseInt(retriesStr, 0, 64)
		}
	} else {
		retries = config.Retries.ValueInt64()
	}

	// Create a new ND client and set it to the provider client
	c, err := nd.NewClient(url, NDFC_BASEPATH, username, password, domain, insecure, nd.MaxRetries(int(retries)))
	if err != nil {
		log.Printf("New client creation error : %s %s", url, NDFC_BASEPATH)
		resp.Diagnostics.AddError(
			"Unable to create client",
			"Unable to create nd client:\n\n"+err.Error(),
		)
		return
	}

	data := NdfcProviderData{Client: &c, UpdateMutex: &sync.Mutex{}}
	resp.DataSourceData = &data
	resp.ResourceData = &data
}

func NewNdfcClient() resource.Resource {
	return &NdfcClient{}
}

func (p *NdfcProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewInterfaceEthernetResource,
		NewInterfaceLoopbackResource,
		NewInterfaceVlanResource,
		NewNetworkResource,
		NewNdfcClient,
	}
}

func (p *NdfcProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewInterfaceEthernetDataSource,
		NewInterfaceLoopbackDataSource,
		NewInterfaceVlanDataSource,
		NewNetworkDataSource,
		NewVRFDataSource,
	}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &NdfcProvider{
			version: version,
		}
	}
}

//template:end provider
