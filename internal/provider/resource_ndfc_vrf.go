// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"fmt"
	"regexp"
	"strings"
	"reflect"
	"log"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/netascode/terraform-provider-ndfc/internal/provider/helpers"
)


//template:end imports

//template:begin model

// Ensure provider defined types fully satisfy framework interfaces
var _ resource.Resource = &NdfcClient{}
var _ resource.ResourceWithImportState = &NdfcClient{}


func (r *NdfcClient) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vrf"
}


func (r *NdfcClient) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: helpers.NewAttributeDescription("This resource can manage a VRF.").String,
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "The id of the object",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
                Create: true,
				Update: true,
				Delete: true,
				Read: true,
            }),
			"fabric_name": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("The name of the fabric").String,
				Optional:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"vrf_name": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("The name of the VRF").String,
				Required:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"vrf_template": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("The name of the VRF template").AddDefaultValueDescription("Default_VRF_Universal").String,
				Optional:            true,
				Computed:            true,
				Default:             stringdefault.StaticString("Default_VRF_Universal"),
			},
			"vrf_extension_template": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("The name of the VRF extension template").AddDefaultValueDescription("Default_VRF_Extension_Universal").String,
				Optional:            true,
				Computed:            true,
				Default:             stringdefault.StaticString("Default_VRF_Extension_Universal"),
			},
			"vrf_id": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("VNI ID of VRF").AddIntegerRangeDescription(1, 16777214).String,
				Optional:            true,
				Computed:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 16777214),
				},
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
			},
			"vlan_id": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("VLAN ID").AddIntegerRangeDescription(2, 4094).String,
				Optional:            true,
				Computed:            true,
				Validators: []validator.Int64{
					int64validator.Between(2, 4094),
				},
			},
			"vlan_name": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("VLAN name").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`^[^\?,\\,\s]{1,128}$`), ""),
				},
			},
			"interface_description": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Interface description").String,
				Optional:            true,
			},
			"vrf_description": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("VRF description").String,
				Optional:            true,
			},
			"mtu": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Interface MTU").AddIntegerRangeDescription(68, 9216).AddDefaultValueDescription("9216").String,
				Optional:            true,
				Computed:            true,
				Validators: []validator.Int64{
					int64validator.Between(68, 9216),
				},
				Default: int64default.StaticInt64(9216),
			},
			"loopback_routing_tag": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Loopback routing tag").AddIntegerRangeDescription(0, 4294967295).AddDefaultValueDescription("12345").String,
				Optional:            true,
				Computed:            true,
				Validators: []validator.Int64{
					int64validator.Between(0, 4294967295),
				},
				Default: int64default.StaticInt64(12345),
			},
			"timeout": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("configure timeout").String,
				Optional:            true,
			},
			"redistribute_direct_route_map": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Redistribute direct route map").AddDefaultValueDescription("FABRIC-RMAP-REDIST-SUBNET").String,
				Optional:            true,
				Computed:            true,
				Default:             stringdefault.StaticString("FABRIC-RMAP-REDIST-SUBNET"),
			},
			"max_bgp_paths": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Maximum BGP paths").AddIntegerRangeDescription(1, 64).AddDefaultValueDescription("1").String,
				Optional:            true,
				Computed:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 64),
				},
				Default: int64default.StaticInt64(1),
			},
			"max_ibgp_paths": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Maximum iBGP paths").AddIntegerRangeDescription(1, 64).AddDefaultValueDescription("2").String,
				Optional:            true,
				Computed:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 64),
				},
				Default: int64default.StaticInt64(2),
			},
			"ipv6_link_local": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enables IPv6 link-local Option under VRF SVI").AddDefaultValueDescription("true").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(true),
			},
			"trm": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable Tenant Routed Multicast").AddDefaultValueDescription("false").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(false),
			},
			"no_rp": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("There is no RP as only SSM is used").AddDefaultValueDescription("false").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(false),
			},
			"rp_external": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Is RP external to the fabric").AddDefaultValueDescription("false").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(false),
			},
			"rp_address": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("IPv4 address").String,
				Optional:            true,
			},
			"rp_loopback_id": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("RP loopback ID").AddIntegerRangeDescription(0, 1023).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(0, 1023),
				},
			},
			"underlay_multicast_address": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("IPv4 Multicast Address. Applicable only when TRM is enabled.").String,
				Optional:            true,
			},
			"overlay_multicast_groups": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Overlay multicast groups").String,
				Optional:            true,
			},
			"mvpn_inter_as": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use the inter-as keyword for the MVPN address family routes to cross the BGP autonomous system (AS) boundaries, applicable when TRM is enabled. IOS XE Specific").AddDefaultValueDescription("false").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(false),
			},
			"trm_bgw_msite": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Enable TRM on Border Gateway Multisite").AddDefaultValueDescription("false").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(false),
			},
			"advertise_host_routes": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Flag to Control Advertisement of /32 and /128 Routes to Edge Routers").AddDefaultValueDescription("false").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(false),
			},
			"advertise_default_route": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Flag to Control Advertisement of Default Route Internally").AddDefaultValueDescription("true").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(true),
			},
			"configure_static_default_route": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Flag to Control Static Default Route Configuration").AddDefaultValueDescription("true").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(true),
			},
			"bgp_password": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("VRF Lite BGP neighbor password (Hex String)").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`^[a-fA-F0-9]+$`), ""),
				},
			},
			"bgp_password_type": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("VRF Lite BGP Key Encryption Type: 3 - 3DES, 7 - Cisco").AddStringEnumDescription("3", "7").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("3", "7"),
				},
			},
			"netflow": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("For netflow on VRF-LITE Sub-interface. Supported only if netflow is enabled on fabric. For NX-OS only").AddDefaultValueDescription("false").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(false),
			},
			"netflow_monitor": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Netflow monitor. For NX-OS only").String,
				Optional:            true,
			},
			"disable_rt_auto": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Applicable to IPv4, IPv6 VPN/EVPN/MVPN").AddDefaultValueDescription("false").String,
				Optional:            true,
				Computed:            true,
				Default:             booldefault.StaticBool(false),
			},
			"route_target_import": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("For VPN Routes Import, One or a Comma Separated List").String,
				Optional:            true,
			},
			"route_target_export": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("For VPN Routes Export, One or a Comma Separated List").String,
				Optional:            true,
			},
			"route_target_import_evpn": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("For EVPN Routes Import, One or a Comma Separated List").String,
				Optional:            true,
			},
			"route_target_export_evpn": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("For EVPN Routes Export, One or a Comma Separated List").String,
				Optional:            true,
			},
			"route_target_import_mvpn": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("For MVPN Routes Import, One or a Comma Separated List").String,
				Optional:            true,
			},
			"route_target_export_mvpn": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("For MVPN Routes Export, One or a Comma Separated List").String,
				Optional:            true,
			},
			"route_target_import_cloud_evpn": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("For Cloud EVPN Routes Import, One or a Comma Separated List").String,
				Optional:            true,
			},
			"route_target_export_cloud_evpn": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("For Cloud EVPN Routes Export, One or a Comma Separated List").String,
				Optional:            true,
			},
			"attachments": schema.SetNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("A list of attachments").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"serial_number": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Serial number of switch to attach").String,
							Required:            true,
						},
						"vlan_id": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Override VLAN ID. `-1` to use VLAN ID defined at VRF level").AddIntegerRangeDescription(-1, 4092).AddDefaultValueDescription("-1").String,
							Optional:            true,
							//Computed:            true,
							Validators: []validator.Int64{
								int64validator.Between(-1, 4092),
							},
							//Default: int64default.StaticInt64(-1),
						},
						"freeform_config": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("This field covers any configuration not included in overlay templates which is needed as part of this VRF attachment").String,
							Optional:            true,
							//Computed:            true,
							//Default:  stringdefault.StaticString(""),
						},
						"loopback_id": schema.Int64Attribute{
							MarkdownDescription: helpers.NewAttributeDescription("Override loopback ID").AddIntegerRangeDescription(0, 1023).String,
							Optional:            true,
							//Computed:            true,
							Validators: []validator.Int64{
								int64validator.Between(0, 1023),
							},
							//Default: int64default.StaticInt64(-1),
						},
						"deploy_config": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Deploy VRF attachments").AddDefaultValueDescription("false").String,
							Optional:            true,
							//Computed:            true,
							//Default:             booldefault.StaticBool(false),
						},
						"loopback_ipv4": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Override loopback IPv4 address").String,
							Optional:            true,
							//Computed:            true,
							//Default:  stringdefault.StaticString(""),
						},
						"loopback_ipv6": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Override loopback IPv6 address").String,
							Optional:            true,
							//Computed:            true,
							//Default:  stringdefault.StaticString(""),
						},
					},
				},
			},
		},
	}
}

func (r *NdfcClient) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*NdfcProviderData).Client
	r.updateMutex = req.ProviderData.(*NdfcProviderData).UpdateMutex
}

//template:end model

func (r *NdfcClient) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state VRF
	// Read plan
	logit()
	diags := req.Plan.Get(ctx, &state)
	if ndfcCheckDiags(diags, resp) {
		return
	}
    tflog.Debug(ctx, "Setting timeout for CREATE operation")
    ctx, diags = state.ndfcSetTimeOut(ctx, "CREATE")
	if ndfcCheckDiags(diags, resp) {
		tflog.Debug(ctx,"Timeout is set for CREATE operation")
	}
    if r.ndfcVrfCreate(ctx, req, resp, &state) == failed {
        return
	}
	tflog.Debug(ctx, fmt.Sprintf("ndfcVrfCreate : %v", state.Id.ValueString()))
	diags = resp.State.Set(ctx, &state)
	ndfcCheckDiags(diags, resp)
}

func (r *NdfcClient) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state VRF
    logit()
	// Read state
	diags := req.State.Get(ctx, &state)
	tflog.Info(ctx, fmt.Sprintf(" Read call state : %v", state.VrfName.ValueString()))
	if ndfcCheckDiags(diags, resp){
		return
	}

	tflog.Info(ctx, fmt.Sprintf(" Read config  : %v", state.VrfName.ValueString()))
	if ndfcCheckDiags(diags, resp){
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.String()))

	ctx, diags = state.ndfcSetTimeOut(ctx, "READ")
	if ndfcCheckDiags(diags, resp) {
		tflog.Debug(ctx,"Timeout is set for READ operation")
	}
	if r.ndfcVrfRead(ctx, req, resp, &state) == failed {
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("ndfcVrfRead complete : %v", state.Id.ValueString()))
	diags = resp.State.Set(ctx, &state)
	ndfcCheckDiags(diags, resp)
}

func (r *NdfcClient) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state, temp VRF
	var delete_attachments bool = false
	logit()
	// Read the plan after computing the change
	diags := req.Plan.Get(ctx, &plan)
	if ndfcCheckDiags(diags, resp) {
		tflog.Debug(ctx,"Timeout is set for UPDATE operation")
	}
	// Read config state from terrafrom .tf file
	diags = req.State.Get(ctx, &state)
	if ndfcCheckDiags(diags, resp) {
		tflog.Debug(ctx,"Timeout is set for UPDATE operation")
	}
    log.Printf("Akash Plan config : %v", plan)
	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.ValueString()))
	ctx, diags = state.ndfcSetTimeOut(ctx, "UPDATE")
	if ndfcCheckDiags(diags, resp) {
		tflog.Debug(ctx,"Timeout is set for UPDATE operation")
	}

	is_equal := reflect.DeepEqual(plan, state)
	log.Printf("Akash is_equal plan and state : %v", is_equal)
	if !is_equal {
		temp = plan
		if len(plan.Attachments) > 0 {
			delete_attachments = false
			if len (state.Attachments) > 0 {
				is_equal := reflect.DeepEqual(plan.Attachments, state.Attachments)
				log.Printf("Akash is_equal plan.Attachments and state.Attachments : %v", is_equal)
				if is_equal {
					temp.Attachments = nil
				} else {
					tempNewAttachments, tempDelAttachments := r.ndfcCompareVrfAttachments(plan, state)
					log.Printf("Akash tempNewAttachments %v : tempDelAttachments %v ", tempNewAttachments, tempDelAttachments)
					if len(tempDelAttachments) > 0 {
						temp.Attachments = tempDelAttachments
						delete_attachments = true
						if r.ndfcVrfUpdate(ctx, req, resp, &temp, delete_attachments) == failed {
							return
						}
					}
					if len(tempNewAttachments) > 0 {
						temp.Attachments = tempNewAttachments
						delete_attachments = false
						if r.ndfcVrfUpdate(ctx, req, resp, &temp, delete_attachments) == failed {
							return
						}
					}
				}
			}
		} else {
			if len (state.Attachments) > 0 {
				log.Printf("state.Attachments > 0 true")
				temp.Attachments = state.Attachments
				delete_attachments = true
			} else{
				delete_attachments = false
			}
		}
		log.Printf("Akash len delete_attachments : %v", delete_attachments)
		if r.ndfcVrfUpdate(ctx, req, resp, &temp, delete_attachments) == failed {
			return
		}
	}
	state = plan
	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))
	diags = resp.State.Set(ctx, &state)
	ndfcCheckDiags(diags, resp)
}

func (r *NdfcClient) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state VRF
	// Read state
	logit()
	diags := req.State.Get(ctx, &state)

	if ndfcCheckDiags(diags, resp) {
		return
	}
	ctx, diags = state.ndfcSetTimeOut(ctx, "DELETE")
	if ndfcCheckDiags(diags, resp) {
		tflog.Debug(ctx,"Timeout is set for DELETE operation")
	}
	if r.ndfcVrfDelete(ctx, req, resp, &state) == failed {
		return
	}
	resp.State.RemoveResource(ctx)
}

//template:begin import
func (r *NdfcClient) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
	idParts := strings.Split(req.ID, ":")

	if len(idParts) != 2 || idParts[0] == "" || idParts[1] == "" {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf("Expected import identifier with format: '<fabric_name>:<vrf_name>'. Got: %q", req.ID),
		)
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("fabric_name"), idParts[0])...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("vrf_name"), idParts[1])...)
}

//template:end import
